{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"13HUAsd9EPqUuZU_NvZiYPiNPHEwjJCK3","timestamp":1664891174166},{"file_id":"1kn6uxO7LjmHmV-4ri5-UPOjpD8Mt1J37","timestamp":1664891075781}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":133},"id":"rP3hPP6nM3GI","executionInfo":{"status":"error","timestamp":1666163412382,"user_tz":-120,"elapsed":11,"user":{"displayName":"Alejandro Cortijo","userId":"18335603417479942728"}},"outputId":"547979f0-9ee1-469a-ae7a-9b966c3293c2"},"outputs":[{"output_type":"error","ename":"SyntaxError","evalue":"ignored","traceback":["\u001b[0;36m  File \u001b[0;32m\"<ipython-input-1-af2bacce1465>\"\u001b[0;36m, line \u001b[0;32m48\u001b[0m\n\u001b[0;31m    lambda row: hacer cosas\u001b[0m\n\u001b[0m                          ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"]}],"source":["import pandas as pd\n","from sklearn.linear_model import LinearRegression\n","import sklearn.compose\n","from sklearn.linear_model import ElasticNet\n","from sklearn.linear_model import Ridge\n","from sklearn.model_selection import cross_val_score\n","import numpy as np\n","from sklearn.pipeline import Pipeline\n","from sklearn.preprocessing import PolynomialFeatures\n","from sklearn.metrics import mean_squared_error\n","from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import normalize\n","\n","# Ignorar errores de divergencias\n","import warnings\n","warnings.filterwarnings('ignore')\n","\n","class Model:\n","  def __init__(self, alpha, ratio, mode, partition=0.2):\n","    self.alpha = alpha\n","    self.ratio = ratio\n","    self.mode = mode\n","    self.partition = partition\n","\n","    self.X = None\n","    self.Y = None\n","\n","    self.X1 = None\n","    self.X2 = None\n","    self.X1_transform = None\n","    self.X2_transform = None\n","\n","    self.reg = None\n","    self.reg_training = None\n","    self.pred = None\n","    self.pred_validation = None\n","    self.csv = None\n","  \n","  def is_sunday_night(self, row):\n","    return (row[\"day\"] == \"Sun\" or row[\"day\"] == \"Sat\" or row[\"day\"] == \"Fri\") and row[\"time\"] == \"Dinner\"\n","    #return row[\"smoker\"] == False and row[\"size\"] == 2 and row[\"time\"] == \"Dinner\"\n","\n","  def load_datasets(self):\n","    self.X = pd.read_csv(\"https://filebin.net/shaudxd8fkswqhto/h2t1sy.csv\", sep=\",\")\n","    self.Y = pd.read_csv(\"https://filebin.net/vqsuwh69m73lq4rx/test.csv\", sep=\",\")\n","\n","    self.X['columna 1'] = self.X.apply(\n","      lambda row: hacer cosas\n","    , axis=1)\n","\n","    self.X['columna 2'] = self.X.apply(\n","      lambda row: hacer cosas\n","    , axis=1)\n","    #self.Y['is_weekend_night'] = self.Y.apply(lambda row: self.is_sunday_night(row), axis=1)\n","\n","  def split_random(self):\n","    self.X_training, self.X_validation = train_test_split(self.X, test_size=self.partition)\n","\n","  def apply_column_transforms(self):\n","    column_transformer_X = sklearn.compose.ColumnTransformer(transformers=[\n","        (\"total_bill\", \"passthrough\", [0]),\n","        (\"tip\", \"drop\", [1]),\n","        (\"sex\", \"drop\", [2]),\n","        (\"smoker\", \"drop\", [3]),\n","        (\"day\", \"drop\", [4]),\n","        (\"time\", sklearn.preprocessing.OneHotEncoder(), [5]),\n","        (\"size\", \"passthrough\", [6]),\n","        (\"is_weekend_night\", \"passthrough\", [7])\n","    ]);\n","\n","    column_transformer_Y = sklearn.compose.ColumnTransformer(transformers=[\n","        (\"id\", \"drop\", [0]),\n","        (\"total_bill\", \"passthrough\", [1]),\n","        (\"sex\", \"drop\", [2]),\n","        (\"smoker\", \"drop\", [3]),\n","        (\"day\", \"drop\", [4]),\n","        (\"time\", sklearn.preprocessing.OneHotEncoder(), [5]),\n","        (\"size\", \"passthrough\", [6]),\n","        (\"is_weekend_night\", \"passthrough\", [7])\n","    ]);\n","\n","    self.X_transform            = column_transformer_X.fit_transform(self.X)\n","    self.X_training_transform   = column_transformer_X.fit_transform(self.X_training)\n","    self.X_validation_transform = column_transformer_X.fit_transform(self.X_validation)\n","    self.Y_transform            = column_transformer_Y.fit_transform(self.Y)\n","\n","#------------ REAL -------------------\n","\n","  def apply_regression(self):\n","    self.reg = ElasticNet(alpha=self.alpha, l1_ratio=self.ratio)\\\n","      .fit(self.X_transform, self.X[\"tip\"])\n","\n","  def predict(self):\n","    self.pred = self.reg.predict(self.Y_transform)\n","\n","#---------- PARA MSE -----------------\n","  \n","  def apply_regression_training(self):\n","    self.reg_training = ElasticNet(alpha=self.alpha, l1_ratio=self.ratio)\\\n","      .fit(self.X_training_transform, self.X_training[\"tip\"])\n","\n","  def predict_training(self):\n","    self.pred_validation = self.reg_training.predict(self.X_validation_transform)\n","\n","# -----------------------------------\n","\n","  def to_csv(self):\n","    self.solucion = pd.DataFrame(data = { \"id\": self.Y[\"id\"], \"tip\": self.pred })\n","  \n","  def save_csv(self, name):\n","    self.solucion.to_csv(name, index=False)\n","\n","  def MSE(self):\n","    return mean_squared_error(self.X_validation[\"tip\"], self.pred_validation)\n","\n","  def run(self):\n","    self.split_random()\n","    self.apply_column_transforms()\n","\n","    if self.mode == \"main\":\n","      self.apply_regression()\n","      self.predict()\n","      self.to_csv()\n","      self.save_csv(\"solucion.csv\")\n","    elif self.mode == \"MSE\": # Solo para calcular MSE. Hace una media del mse de intentos con divisiones aleatorias\n","      self.apply_regression_training()\n","      self.predict_training()\n","\n","def run_MSE(sample_n = 500):\n","  mse_total = 0\n","  alpha = 0\n","  ratio = 0.12\n","\n","  model = Model(alpha=alpha, ratio=ratio, mode=\"MSE\", partition=0.2)\n","  model.load_datasets()\n","\n","  for i in range(sample_n):\n","    model.run()\n","      \n","    mse = model.MSE()\n","    mse_total += mse\n","\n","  print(\"avg:\", mse_total/sample_n)\n","\n","def run_main():\n","  alpha = 4.9\n","  ratio = 0.13\n","\n","  model = Model(alpha=alpha, ratio=ratio, mode=\"main\")\n","  model.load_datasets()\n","  model.run()\n","\n","  print(\"Real average of training set:\", )\n","  print(\"Prediction average:\", sum(model.pred)/len(model.pred))\n","  return model.pred\n","\n","#run_MSE(500)\n","pred = run_main()\n","pred\n"]},{"cell_type":"markdown","source":["# New Section"],"metadata":{"id":"1yTR0XBCuV1K"}},{"cell_type":"markdown","source":["# New Section"],"metadata":{"id":"sKKxUZ2ouV6k"}},{"cell_type":"code","source":["a = [1, 4, 2, 1, 8 ,1 , 2, 3]\n","\n","sorted(a, key=lambda n: n)"],"metadata":{"id":"wVYN8RurksO9","executionInfo":{"status":"aborted","timestamp":1666163412383,"user_tz":-120,"elapsed":5,"user":{"displayName":"Alejandro Cortijo","userId":"18335603417479942728"}}},"execution_count":null,"outputs":[]}]}